# 1. Build the test image using current commit hash as tag.
# 2. Pull test image, run tests, clean up test image.
# 3. Build production ready image for staging or production.
name: Build test and publish

on:
  push:
    branches: ["production"]

jobs:
  build-test-image:
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      image_sha: ${{ steps.build_env.outputs.image_sha }}
    steps:
      - uses: actions/checkout@v3
      - name: Preparing environments
        id: build_env
        shell: bash
        run: |
          echo "image_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
      - name: Preparing metadata
        uses: docker/metadata-action@v3
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Logging in to ghrc.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and upload test docker image on ghrc.io
        uses: int128/kaniko-action@v1
        with:
          push: true
          build-args: |
            - POETRY_INSTALL_OPTS="--no-root"
            - POETRY_VERSION="1.8.5"
          target: production
          tags: ghcr.io/${{ github.repository }}:${{ steps.build_env.outputs.image_sha }}
          labels: ${{ steps.metadata.outputs.labels }}

  run-test-image:
    needs: build-test-image
    permissions: write-all
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Run tests
        uses: addnab/docker-run-action@v3
        env:
          APP_ENVIRONMENT: test
          DOMAIN: example.com
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
          DJANGO_SETTINGS_MODULE: mp.config.test
          SECRET_KEY: django-insecure-secret-key
          DB_SYMMETRIC_KEY: IFdjlMcWEjpswSDoOhiEhsQXugioBs_Pbg5z1J8G91U=
          ES256_PRIVATE_KEY_PATH: mp/jwt/tests/resources/keys/private_key.pem
          ES256_PUBLIC_KEY_PATH: mp/jwt/tests/resources/keys/public_key.pem
        with:
          registry: ghcr.io
          image: ghcr.io/${{ github.repository }}:${{ needs.build-test-image.outputs.image_sha }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          options: |
            -e APP_ENVIRONMENT
            -e DOMAIN
            -e DATABASE_URL
            -e DJANGO_SETTINGS_MODULE
            -e SECRET_KEY
            -e DB_SYMMETRIC_KEY
            -e ES256_PRIVATE_KEY_PATH
            -e ES256_PUBLIC_KEY_PATH
          run: |
            poetry run pytest .
      - name: Delete test image from ghcr.io
        uses: chipkent/action-cleanup-package@v1.0.1
        with:
          package-name: ${{ github.event.repository.name }}
          tag: ${{ needs.build-test-image.outputs.image_sha }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: run-test-image
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Preparing metadata
        uses: docker/metadata-action@v3
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Logging in to ghrc.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and upload docker image on ghrc.io
        uses: int128/kaniko-action@v1
        with:
          push: true
          build-args: |
            - POETRY_INSTALL_OPTS="--no-root --without dev"
            - POETRY_VERSION="1.8.5"
          target: production
          tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache: true
          cache-repository: ghcr.io/${{ github.repository }}/cache
